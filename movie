#!/usr/bin/env bash
source "$HOME"/scripts/gb
source "$HOME"/scripts/gb-audacious

function no_such_dir(){ msgc "ERROR" "no such directory as <span color=\"${orange}\">\$HOME/speech/${directory}</span>" "$HOME"/linux/themes/delete-w.png && exit ;}

[ "$play_status" == "playing" ] && continue_playing="True" || continue_playing="False"

[ ! "$1" ] && exit
[ "$1" == "random" ] && title="random movie" || title="select movie"

cd "$HOME"/movie
directories=( $(find . -mindepth 1 -maxdepth 1 -type d | cut -c 3- | sort) )

## get movie count in each directory and prepend it to the directory name
directories_plus_count=()
for tmp_directory in "${directories[@]}"; do
    tmp_movies="$(find "$tmp_directory" -mindepth 1 -maxdepth 1 -type f ! -iname "*.srt" | cut -c 3- | sort)"
    ## "$(wc -l <<< "$(echo "$tmp_movies")")" returns 1 even if there are no tmp_movies
    ## so, we have to do this:
    [ "$tmp_movies" ] && movies_count="$(wc -l <<< "$(echo "$tmp_movies")")" || movies_count=0
    ## decide how many spaces to add
    if [ "$movies_count" -lt 10 ]; then
        spaces="       "
    elif [ "$movies_count" -lt 100 ]; then
        spaces="     "
    else
        spaces="   "
    fi
    directories_plus_count+=( "${movies_count}${spaces}${tmp_directory}" )
done

directory="$(pipe_to_dmenu "${directories_plus_count[@]}" "$title" "")" || exit 37

directory="${directory##*" "}"  ## remove count

## pick
[ ! -d "$HOME"/movie/"$directory" ] && no_such_dir || cd "$HOME"/movie/"$directory"
case "$1" in
    random ) movie="$(shuf -n 1 <<< "$(find . -mindepth 1 -maxdepth 1 -type f ! -iname "*.srt" | cut -c 3-)")" ;;
    select ) movies=( $(find . -mindepth 1 -maxdepth 1 -type f ! -iname "*.srt" | cut -c 3- | sort) )
             movie="$(pipe_to_dmenu "${movies[@]}" "$directory" "")" || exit 37 ;;
    * ) exit ;;  ## do NOT remove
esac

## play
base="${movie##*/}"
base="${base%.*}"
msgn "playing" "<span color=\"${orange}\">${base}</span>" "$HOME"/linux/themes/filmroll-w.png
vlc -f --play-and-exit -- "$movie" 2>/dev/null

## move to WATCHED or remove
what_to_dos=( "" "mv to WATCHED" "remove" )
what_to_do="$(pipe_to_dmenu "${what_to_dos[@]}" "$movie" "red")" # || exit 37  ## the exit is exceptionally commented

case "$what_to_do" in
    "mv to WATCHED" ) function success_moving(){ msgn "moved to <span color=\"${blue}\">WATCHED</span>" "<span color=\"${orange}\">${base}</span>" ;}
                      function error_moving(){ msgc "ERROR" "moving <span color=\"${orange}\">${base}</span> to <span color=\"${blue}\">WATCHED</span>$1" "$HOME"/linux/themes/alert-w.png ;}

                      [ -d "WATCHED" ] || mkdir WATCHED
                      mv "$movie" WATCHED && success_moving || error_moving ;;

    remove ) function success_removing(){ msgn "removed" "<span color=\"${red}\"><b>${base}</b></span>" "$HOME"/linux/themes/delete-w.png ;}
             function error_removing(){ msgc "ERROR" "removing <span color=\"${orange}\">${base}</span>$1" "$HOME"/linux/themes/alert-w.png ;}

             rm "$movie" && success_removing || error_removing ;;
    # * ) : ;;  ## do NOT uncomment
esac

## play audacious if it was playing before the video
[ "$continue_playing" == "True" ] && "$HOME"/scripts/awesome-widgets audacious play_pause

exit
