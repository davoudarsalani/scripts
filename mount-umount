#!/usr/bin/env bash
source "$HOME"/scripts/gb

function help(){ source "$HOME"/scripts/.help; mount_umount_help ;}

while getopts 'hd:n:' flag; do
    case "$flag" in
        h ) help             ;;
        d ) device="$OPTARG" ;;
        n ) name="$OPTARG"   ;;
    esac
done

mounted_drives="$(df -hT)"

case "$1" in
    mount ) get_mountable_umountable

            [ ! "$mountable" ] && msgn "nothing to mount" && exit

            mountable_items=( "$mountable" )
            mountable_item="$(pipe_to_dmenu "${mountable_items[@]}" "mountables" "")" || exit 37

            current_datetime="$(get_datetime "jymdhms")"
            name="$(echo "$mountable_item" | awk '{print $1}')"  ## sdb1

            function msg_mount_successful(){ msgn "<span color=\"${orange}\">/dev/${name}</span> mounted at <span color=\"${orange}\">/tmp/${current_datetime}-${name}</span>" ;}

            function msg_mount_failed(){ msgc "ERROR" "mounting <span color=\"${orange}\">/dev/${name}</span>" "$HOME"/linux/themes/alert-w.png ;}

            mkdir -p /tmp/"$current_datetime"-"$name"

            if [ "$(echo "$name" | \grep "^sr")" ]; then
                sudo mount /dev/"$name" /tmp/"$current_datetime"-"$name" && msg_mount_successful || msg_mount_failed
            else
                sudo mount -o umask=000 /dev/"$name" /tmp/"$current_datetime"-"$name" && msg_mount_successful || msg_mount_failed
            fi

            accomplished ;;
    umount ) get_mountable_umountable

             [ ! "$umountable" ] && msgn "nothing to umount" && exit

             umountable_items=( "$umountable" )
             umountable_item="$(pipe_to_dmenu "${umountable_items[@]}" "umountables" "")" || exit 37

             name="$(echo "$umountable_item" | awk '{print $1}')"

             function msg_umount_successful(){ msgn "<span color=\"${orange}\">/dev/${name}</span> umounted" ;}
             function msg_umount_failed(){ msgc "ERROR" "umounting <span color=\"${orange}\">/dev/${name}</span>" "$HOME"/linux/themes/alert-w.png ;}

             sudo umount /dev/"$name" && msg_umount_successful || msg_umount_failed

             accomplished ;;
esac

title="${0##*/}"
heading "$title"

main_items=( "udisksctl mount -b" "udisksctl unmount -b" "lsblk" "blkid and lsblk -f" "lsusb" "lsmod (modules loaded)" "lspci" "mounted drives" "kernel drivers" "remount root partition" "mountable" "umountable" "format usb device" "cat /proc/mounts" "help" )
man_item="$(pipe_to_fzf "${main_items[@]}")" && wrap_fzf_choice "$main_item" || exit 37

case "$man_item" in
    "udisksctl mount -b" ) [ ! "$device" ] && get_input "Device to mount (e.g. /dev/sdc)" && device="$input"
                           sudo udisksctl mount -b "$device" && lsblk_full && accomplished "$device mounted" ;;
    "udisksctl unmount -b" ) [ ! "$device" ] && get_input "Device to umount (e.g. /dev/sdc)" && device="$input"
                             sudo udisksctl umount -b "$device" && lsblk_full && accomplished "$device umounted" ;;
    lsblk ) lsblk_full && accomplished ;;
    "blkid and lsblk -f" ) sudo blkid
                           echo
                           \lsblk -f && accomplished ;;
    lsusb ) lsusb && accomplished ;;
    "lsmod (modules loaded)" ) lsmod && accomplished ;;
    lspci ) lspci && accomplished ;;
    "mounted drives" ) echo "$mounted_drives" && accomplished ;;
    "kernel drivers" ) lspci -k && accomplished ;;
    "remount root partition" ) get_single_input "You sure?" "red_blink" && remount_prompt="$single_input"
                               case "$remount_prompt" in
                                   y ) mount -o remount,rw / && accomplished ;;
                               esac ;;
    mountable ) [ "$mountable" ] && echo "$mountable" && accomplished ;;
    umountable ) [ "$umountable" ] && echo "$umountable" && accomplished ;;
    "format usb device" ) [ ! "$device" ] && get_input "Device to format (e.g. /dev/sdc)" && device="$input"
                          sleep 0.5
                          sudo wipefs --all "$device" && accomplished
                          echo "---------------"
                          read -p "> Creating a new partition table (choose dos). Press any key to continue ..."
                          sleep 5
                          sudo cfdisk "$device" && accomplished
                          sleep 0.5

                          filesystems=( "ext4" "vfat" )
                          filesystem="$(pipe_to_fzf "${filesystems[@]}")" && wrap_fzf_choice "$filesystem" || exit 37

                          case "$filesystem" in
                              ext4 ) sudo mkfs.ext4 "$device"1 && accomplished ;;
                              vfat ) [ ! "$name" ] && get_input "Name (e.g. NINO)" && name="$input"
                                     device+=1
                                     sudo mkfs.vfat -n "$name" "$device" && accomplished ;;
                          esac ;;
    "cat /proc/mounts" ) cat /proc/mounts && accomplished ;;
    help ) help ;;
esac

exit
