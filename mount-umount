#!/usr/bin/env bash

## last modified: 1400-09-14 18:16:13 +0330 Sunday

source "$HOME"/scripts/gb

title="${0##*/}"

function display_help {
    source "$HOME"/scripts/.help
    mount_umount_help
}

function prompt {
    for _ in "$@"; {
        case "$1" in
            -d ) [ "$device" ] || device="$(get_input 'Device (e.g. /dev/sdc)')" ;;
            -n ) [ "$name"   ] || name="$(get_input "Name (e.g. ${USER^^})")"    ;;
        esac
        shift
    }
}

function get_opt {
    local options

    options="$(getopt --longoptions 'help,device:,name:' --options 'hd:n:' --alternative -- "$@")"
    eval set -- "$options"
    while true; do
        case "$1" in
            -h|--help )   display_help       ;;
            -d|--device ) shift; device="$1" ;;
            -n|--name )   shift; name="$1"   ;;
            -- )          break              ;;
        esac
        shift
    done
}

get_opt "$@"

case "$1" in
    mount ) get_mountable_umountable
            [ "$mountable" ] || {
                msgn 'nothing to mount'
                exit
            }
            mountable_item="$(pipe_to_rofi "${mountable[@]}" 'header=mountable')" || exit 37

            current_datetime="$(get_datetime 'jymdhms')"
            name="$(printf '%s\n' "$mountable_item" | awk '{print $1}')"  ## sdb1

            function msg_mount_successful {
                msgn "<span color=\"${orange}\">/dev/${name}</span> mounted at <span color=\"${orange}\">/tmp/${current_datetime}-${name}</span>"
            }

            function msg_mount_failed {
                msgc 'ERROR' "mounting <span color=\"${orange}\">/dev/${name}</span>" "$HOME"/linux/themes/alert-w.png
            }

            mkdir -p /tmp/"$current_datetime"-"$name"

            if  \grep -q '^sr' <<< "$name"; then
                sudo mount /dev/"$name" /tmp/"$current_datetime"-"$name" && msg_mount_successful || msg_mount_failed
            else
                sudo mount -o umask=000 /dev/"$name" /tmp/"$current_datetime"-"$name" && msg_mount_successful || msg_mount_failed
            fi

            accomplished ;;
    umount ) get_mountable_umountable
             [ "$umountable" ] || {
                 msgn 'nothing to umount'
                 exit
             }
             umountable_item="$(pipe_to_rofi "${umountable[@]}" 'header=umountable')" || exit 37

             name="$(printf '%s\n' "$umountable_item" | awk '{print $1}')"

             function msg_umount_successful {
                 msgn "<span color=\"${orange}\">/dev/${name}</span> umounted"
             }

             function msg_umount_failed {
                 msgc 'ERROR' "umounting <span color=\"${orange}\">/dev/${name}</span>" "$HOME"/linux/themes/alert-w.png
             }

             sudo umount /dev/"$name" && msg_umount_successful || msg_umount_failed

             accomplished ;;
esac

heading "$title"

main_items=( 'udisksctl mount -b' 'udisksctl unmount -b' 'lsblk' 'blkid and lsblk -f' 'lsusb' 'lsmod (modules loaded)' 'lspci' 'mounted drives' 'kernel drivers' 'remount root partition' 'mountable' 'umountable' 'format usb device' 'cat /proc/mounts' 'help' )
man_item="$(pipe_to_fzf "${main_items[@]}")" && wrap_fzf_choice "$main_item" || exit 37

case "$man_item" in
    'udisksctl mount -b' ) prompt -d
                           sudo udisksctl mount -b "$device" && lsblk_full && accomplished "$device mounted" ;;
    'udisksctl unmount -b' ) prompt -d
                             sudo udisksctl umount -b "$device" && lsblk_full && accomplished "$device umounted" ;;
    lsblk ) lsblk_full && accomplished ;;
    'blkid and lsblk -f' ) sudo blkid
                           printf '\n'
                           \lsblk -f && accomplished ;;
    lsusb ) lsusb && accomplished ;;
    'lsmod (modules loaded)' ) lsmod && accomplished ;;
    lspci ) lspci && accomplished ;;
    'mounted drives' ) printf '%s\n' "$(mounted_drives)" && accomplished ;;
    'kernel drivers' ) lspci -k && accomplished ;;
    'remount root partition' ) remount_prompt="$(get_single_input 'You sure?')" && printf '\n'
                               case "$remount_prompt" in
                                   y ) mount -o remount,rw / && accomplished ;;
                               esac ;;
    mountable ) [ "$mountable" ] && printf '%s\n' "$mountable" && accomplished ;;
    umountable ) [ "$umountable" ] && printf '%s\n' "$umountable" && accomplished ;;
    'format usb device' ) prompt -d
                          sleep 0.5
                          sudo wipefs --all "$device" && accomplished
                          printf '+-+-+-+-+-+-+-+-+\n'
                          read -p '> Creating a new partition table (choose dos). Press any key to continue ...'
                          sleep 5
                          sudo cfdisk "$device" && accomplished
                          sleep 0.5

                          filesystem="$(pipe_to_fzf 'ext4' 'vfat')" && wrap_fzf_choice "$filesystem" || exit 37

                          case "$filesystem" in
                              ext4 ) device+=1  ## /dev/sdc1
                                     sudo mkfs.ext4 "$device" && accomplished ;;
                              vfat ) prompt -n
                                     device+=1  ## /dev/sdc1
                                     sudo mkfs.vfat -n "$name" "$device" && accomplished ;;
                          esac ;;
    'cat /proc/mounts' ) cat /proc/mounts && accomplished ;;
    help ) display_help ;;
esac

exit
