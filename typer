#!/usr/bin/env bash

## @last-modified 1400-10-29 11:05:01 +0330 Wednesday

source "$HOME"/scripts/gb
source "$HOME"/scripts/gb-audio
source "$HOME"/scripts/gb-calculation

title="${0##*/}"

function display_help {
    source "$HOME"/scripts/.help
    typer_help
}

function countdown {
    [ "$no_countdown" ] && return

    local int

    for ((int=10; int>0; int--)); {
        printf '%s\e[0K\r' "$(blue "$int")"
        sleep 1
    }
}

function sleep_now {
    if [ "$interval" == 'random' ]; then
        sleep "${intervals["$(( "$RANDOM" % "$intervals_length" ))"]}"
    else
        sleep "$interval"
    fi
}

function play_random_key_sound {
    pacmd play-file "$key_sound" "${key_sounds["$(( "$RANDOM" % "$key_sounds_length" ))"]}" "$def_sink_index"
}

function type_in_vim {
    local chars_count char_idx perc remaining_chars eta_mid eta_mid_conv

    chars_count="$(wc -c < "$file")"
    # (( chars_count+=100 ))  ## add 100 just in case

    countdown

    ## strike keys
    for ((char_idx=1; char_idx<="$chars_count"; char_idx++)); {
        (( perc="char_idx * 100 / chars_count" ))
        (( remaining_chars="chars_count - char_idx" ))
        eta_mid="$(float_pad "${remaining_chars}*${intervals_middle_member}")"
        eta_mid_conv="$(convert_second "$eta_mid")"

        printf '%s %s %s\e[0K\r' "$(green "${char_idx}/${chars_count}")" "$(yellow "${perc}%")" "$(brown "eta: ${eta_mid_conv}")"

        xdotool key c
        "$play" && sleep_now
    }
    printf '\n'

    accomplished 'Done. Press Ctrl+C in vim to exit'
}

function type_in_terminal {
    local lines_count line_idx

    countdown

    clear
    while read line; do  ## read file one line at a time
        lines_count="${#line}"
        for ((line_idx=0; line_idx<"$lines_count"; line_idx++)); {  ## read line one character at a time
            printf '%s' "${line:$line_idx:1}"  ## NOTE no \n
            "$play" && sleep_now
        }
        printf '\n'
    done < "$file"
}

function prompt {
    for _ in "$@"; {
        case "$1" in
            -f )
                file="${file:-"$(get_input 'File')"}" ;;
            -i )
                interval="${interval:-"$(get_input 'Interval (e.g. 0.2, 1, random, etc)')"}" ;;
        esac
        shift
    }
}

function get_opt {
    local options

    options="$(getopt --longoptions 'help,quiet,no-countdown,file:,interval:' --options 'hqnf:i:' --alternative -- "$@")"
    eval set -- "$options"
    while true; do
        case "$1" in
            -h|--help )
                display_help ;;
            -q|--quiet )
                is_quiet='true' ;;
            -n|--no-countdown )
                no_countdown='true' ;;
            -f|--file )
                shift
                file="$1" ;;
            -i|--interval )
                shift
                interval="$1" ;;
            -- )
                break ;;
        esac
        shift
    done
}


get_opt "$@"

IFS=   ## prevent leading spaces from being ignored (https://stackoverflow.com/questions/29689172/bash-read-ignores-leading-spaces)
intervals=(
    0.05
    0.06
    0.07
    0.08
    0.09
    0.1
    0.2
    0.3
)
intervals_length="${#intervals[@]}"
intervals_middle_member="${intervals["$(( "$intervals_length" / 2 ))"]}"

key_sounds=(
    "$HOME"/linux/sounds/key_press_1.wav
    "$HOME"/linux/sounds/key_press_1_dance.wav
    "$HOME"/linux/sounds/key_press_2.wav
    "$HOME"/linux/sounds/key_press_2_fullbase.wav
)
key_sounds_length="${#key_sounds[@]}"
[ "$is_quiet" == 'true' ] && play=':' || play='play_random_key_sound'

heading "$title"

main_item="$(pipe_to_fzf 'in vim' 'in terminal' 'help')" && wrap_fzf_choice "$main_item" || exit 37

case "$main_item" in
    'in vim' )
        prompt -f -i
        type_in_vim ;;
    'in terminal' )
        prompt -f -i
        type_in_terminal ;;
    help )
        display_help ;;
esac
