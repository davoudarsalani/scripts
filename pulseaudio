#!/usr/bin/env bash

## last modified: 1400-09-06 13:31:52 +0330 Saturday

source "$HOME"/scripts/gb
source "$HOME"/scripts/gb-audio

title="${0##*/}"

function display_help {
    source "$HOME"/scripts/.help
    pulseaudio_help
}

function prompt {
    for args in "$@"; {
        case "$1" in
            -d ) [ ! "$default" ] && get_input 'Default sink/source index/name' && default="$input"
        esac
        shift
    }
}

function get_opt {
    local options="$(getopt -l 'help,default:' -o 'hd:' -a -- "$@")"
    eval set -- "$options"
    while true; do
        case "$1" in
            -h|--help )    display_help        ;;
            -d|--default ) shift; default="$1" ;;
            -- )           break               ;;
        esac
        shift
    done
}

get_opt "$@"
heading "$title"

main_items=( 'cards' 'sinks/sources' 'default sink/source/mon' 'all levels + mute status' 'active sink/source port' 'app responsible for sound card' 'apps using sink/source' 'set default sink/source' 'restart' 'help' )
main_item="$(pipe_to_fzf "${main_items[@]}")" && wrap_fzf_choice "$main_item" || exit 37

case "$main_item" in
    cards ) pacmd list-cards && accomplished ;;
    'sinks/sources' ) pacmd list-sinks | egrep -i 'index:|name:'  ## OR  printf '%s\n' "$(pacmd list-cards | \grep -iA 5 sinks | sed '/sources/q' | \egrep -iv 'sinks|sources' | cut -d '#' -f 2 | cut -c 1)
                      pacmd list-sources | egrep -i 'index:|name:' && accomplished ;;  ## OR  printf '%s\n' "$(pacmd list-cards | \grep -iA 5 sources | sed '/ports/q' | \egrep -iv 'sources|ports' | cut -d '#' -f 2 | cut -c 1)
    'default sink/source/mon' ) printf 'default sink name:\t%s\n' "$def_sink_name"
                                printf 'default sink index:\t%s\n' "$def_sink_index"
                                printf 'default source name:\t%s\n' "$def_source_name"
                                printf 'default source index:\t%s\n' "$def_source_index"
                                printf 'default mon name:\t%s\n' "$def_source_mon_name"
                                printf 'default mon index:\t%s\n' "$def_source_mon_index" && accomplished ;;
    'all levels + mute status' )
printf '%s\n' "\
Vol
name:   ${def_sink_name}
index:  ${def_sink_index}
level:  ${vol_level}
state:  ${vol_state}
mute:   ${vol_mute_status}

Mic
name:   ${def_source_name}
index:  ${def_source_index}
level:  ${mic_level}
state:  ${mic_state}
mute:   ${mic_mute_status}

Mon
name:   ${def_source_mon_name}
index:  ${def_source_mon_index}
level:  ${mon_level}
state:  ${mon_state}
mute:   ${mon_mute_status}

Active ports
sink:   ${active_sink_port}
source: ${active_source_port}"
;;
    'active sink/source port' )  printf 'active sink port:\t%s\n' "$active_sink_port"
                                 printf 'active source port:\t%s\n' "$active_source_port" && accomplished ;;
    'app responsible for sound card' ) ## application which is responsible for a direct access to the sound card via alsa
                                       fuser -v /dev/snd/* && accomplished ;;
    'apps using sink/source' ) printf 'apps using sink:\n'
                               pacmd list-sink-inputs | \grep -i 'application.name =' | \grep -ioP '(?<=").*?(?=")'
                               printf 'apps using source:\n'
                               pacmd list-source-outputs && accomplished ;;
    'set default sink/source' ) defaults=( 'set default sink' 'set default source' )
                                default="$(pipe_to_fzf "${defaults[@]}")" && wrap_fzf_choice "$default" || exit 37

                                case "$default" in
                                    'set default sink' ) prompt -d
                                                         pacmd set-default-sink "$default" && accomplished ;;
                                    'set default source' ) prompt -d
                                                           pacmd set-default-source "$default" && accomplished ;;
                                esac ;;
    restart ) get_single_input 'You sure?' && restart_prompt="$single_input"
              case "$restart_prompt" in
                  y ) pulseaudio --kill && sleep 1 && pulseaudio --start && msgn 'pulseaudio restarted' && accomplished ;;
              esac ;;
    help ) display_help ;;
esac

exit
