#!/usr/bin/env bash

function float_pad {  ## {{{
    local input="$1"                  ## an int, float or expression, e.g. 43, 6.82, or '87*932/12' (no spaces allowd in expression)
    local desired_l_length="${2:-1}"  ## min   length for l, e.g. 1
    local desired_r_length="${3:-2}"  ## exact length for r, e.g. 2

    ## make input a float even if it is an int or an expression (https://www.shell-tips.com/bash/math-arithmetic-calculation)
    local float="$(awk "BEGIN {printf \"%.${desired_r_length}f\n\", "$input"}")"

    ## separate l and r
    local l="${float%.*}"  ## 8
    local r="${float#*.}"  ## 123

    ## make l have the desired_l_length
    local l="$(printf "%0${desired_l_length}d" "$l")"  ## 8 to 08

    ## make r have the desired_r_length
    local r_length="${#r}"
    if [ "$desired_r_length" -gt "$r_length" ]; then  ## add trailing zeros to r if shorter than desired_r_length
        local lacking_pad
        let lacking_pad="$desired_r_length - $r_length"
        for ((i=0; i<"$lacking_pad"; i++)); {
            local r="${r}0"
        }
    elif [ "$desired_r_length" -lt "$r_length" ]; then  ## purge r if longer than desired_r_length
        r="${r::$desired_r_length}"
    fi

    printf '%s.%s\n' "$l" "$r"
}
## }}}
function compare_floats {  ## {{{
    ## https://stackoverflow.com/questions/8654051/how-to-compare-two-floating-point-numbers-in-bash
    ## usage: is_smaller="$(compare_floats "$first" '<' "$second")"  ## returns true or false

    local float1="$1"
    local oper="$2"
    local float2="$3"

    ## validate floatness
    # [[ "$float1" =~ ^-*[[:digit:]]*[.][[:digit:]]* ]] || float1="$(float_pad "$float1" 2 2)"
    # [[ "$float2" =~ ^-*[[:digit:]]*[.][[:digit:]]* ]] || float2="$(float_pad "$float2" 2 2)"

    ## compare
    case "$oper" in
         '<' ) [ "$(awk '{printf($1 <  $2) ? "Yes" : "No"}' <<< "$float1 $float2")" == 'Yes' ] && printf '%s\n' 'true' || printf '%s\n' 'false' ;;
         '=' ) [ "$(awk '{printf($1 == $2) ? "Yes" : "No"}' <<< "$float1 $float2")" == 'Yes' ] && printf '%s\n' 'true' || printf '%s\n' 'false' ;;
         '>' ) [ "$(awk '{printf($1 >  $2) ? "Yes" : "No"}' <<< "$float1 $float2")" == 'Yes' ] && printf '%s\n' 'true' || printf '%s\n' 'false' ;;
    esac
}
## }}}
function convert_byte {  ## {{{
    ## conversion table:
    ## bytes=2546790
    ## B  = "$bytes"               ## 2546790
    ## KB = "$bytes" / 1024        ## 248720.50KB
    ## MB = "$bytes" / 1024000     ## 248.72MB
    ## GB = "$bytes" / 1024000000  ## 00.25GB

    local bytes="$1"
    if [ "$bytes" -eq 0 ]; then
        local number=0
        local suffix='B'
    elif [ "$bytes" -gt 1024000000 ]; then
        local number="$(float_pad "${bytes}/1024000000" 1 2)"
        local suffix='GB'
    elif [ "$bytes" -gt 1024000 ]; then
        local number="$(float_pad "${bytes}/1024000" 1 2)"
        local suffix='MB'
    elif [ "$bytes" -gt 1024 ]; then
        local number="$(float_pad "${bytes}/1024" 1 2)"
        local suffix='KB'
    else
        local number="$bytes"
        local suffix='B'
    fi

    printf '%s%s\n' "$number" "$suffix"
}
## }}}
