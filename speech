#!/usr/bin/env bash

## last modified: 1400-09-10 21:50:45 +0330 Wednesday

source "$HOME"/scripts/gb
source "$HOME"/scripts/gb-audacious

function update_audacious {
    "$HOME"/scripts/awesome-widgets audacious
}

function no_such_dir {
    msgc 'ERROR' "no such directory as <span color=\"${orange}\">\$HOME/speech/${directory}</span>" "$HOME"/linux/themes/alert-w.png
    exit
}

function success_moving {
    local text="$(printf "moved to <span color=\"%s\">LISTENED</span>\n<span color=\"%s\">%s</span>\n" "$blue" "$orange" "$no_suffix")"
    msgn "$text" '' "$HOME"/linux/themes/delete-w.png
}

function error_moving {
    msgc 'ERROR' "moving <span color=\"${orange}\">${no_suffix}</span>" "$HOME"/linux/themes/alert-w.png
    exit
}

declare -a directories_plus_count

readarray -t directories < <(find "$HOME"/speech -mindepth 1 -maxdepth 1 -type d | sort)

## get audio count in each directory and prepend it to the directory name
for tmp_directory in "${directories[@]}"; {
    audios_count="$(wc -l < <(find "$tmp_directory" -mindepth 1 -maxdepth 1 -type f -iname '*.mp3'))"

    ## decide how many spaces to add
    if (( audios_count < 10 )); then
        spaces="         "
    elif (( audios_count < 100 )); then
        spaces="       "
    elif (( audios_count < 1000 )); then
        spaces="     "
    else
        spaces="   "
    fi
    directories_plus_count+=( "${audios_count}${spaces}${tmp_directory##*/}" )
}

case "$1" in
    play ) directory="$(pipe_to_rofi "${directories_plus_count[@]}" 'header=speech')" || exit 37

           directory="${directory##*' '}"  ## remove count

           [ ! -d "$HOME"/speech/"$directory" ] && no_such_dir

           turn_off_shuffle; sleep 0.1
           clear_playlist  ; sleep 0.1

           msgn 'playing' "<span color=\"${orange}\">${directory}</span>" "$HOME"/linux/themes/user-w.png

           readarray -t first_five_files < <(find "$HOME"/speech/"$directory" -mindepth 1 -maxdepth 1 -iname '*.mp3' | sort | head -n 5)
           audacious -E "${first_five_files[@]}"  # &
           sleep 0.1
           "$HOME"/scripts/awesome-widgets audacious resume ;;

    move ) ## exit if album is not speech
           [ ! "$album" == 'speech' ] && exit  ## NOTE <--,-- do NOT remove this line because audacious is told to run the scripts with remove auto args
                                               ##         '-- whenever starting a new song no matter what the album is

           if [ "$2" == 'auto' ]; then
              ## this option is called directly by audacious when starting a new song

              directory="${current_song_dir}"  ## /home/${USER}/speech/pargar
              directory="${directory##*/}"  ## pargar
           else
               directory="$(pipe_to_rofi "${directories_plus_count[@]}" 'header=speech' 'bg=red')" || exit 37
               ## remove count:
               directory="${directory##*' '}"  ## pargar
           fi

           [ ! -d "$HOME"/speech/"$directory" ] && no_such_dir

           first_file="$(find "$HOME"/speech/"$directory" -mindepth 1 -maxdepth 1 -iname '*.mp3' | sort | head -n 1)"  ## /home/${USER}/speech/pargar/709.mp3

           base="${first_file##*/}"
           no_suffix="${base%.*}"

           ## exit if first file is the same as the current song
           [ "$current_song" == "$first_file" ] && exit

           [ -d "$HOME"/speech/"$directory"/LISTENED ] || mkdir "$HOME"/speech/"$directory"/LISTENED
           mv "$first_file" "$HOME"/speech/"$directory"/LISTENED && success_moving || error_moving

           ## trigger add_4 only if current playing file is the last file in playlist
           if (( playlist_length == position_in_playlist )); then
               "$HOME"/scripts/speech add_4
           else
               update_audacious
           fi ;;
    add_4 ) if [ ! "$album" ] || [ "$album" == 'speech' ]; then

                ## remove previous files from playlist
                if (( position_in_playlist == 1 )); then
                    :
                elif (( position_in_playlist > 1 )); then
                    for ((i=1; i<"$position_in_playlist"; i++)); {
                        audtool --playlist-delete 1
                        sleep 0.01
                    }
                elif [ ! "$position_in_playlist" ]; then
                    clear_playlist
                    "$HOME"/scripts/speech play &
                    exit
                fi

                ## add 4 new files to playlist
                readarray -t first_five_files < <(find "$current_song_dir" -mindepth 1 -maxdepth 1 -iname '*.mp3' | sort | head -n 5)
                current_songs="$(audtool --playlist-display)"

                for file in "${first_five_files[@]}"; {
                    base="${file##*/}"
                    no_suffix="${base%.*}"
                    if [ ! "$(printf '%s\n' "$current_songs" | \grep -i "$no_suffix")" ]; then
                        audacious -e "$file"
                        msgn "added <span color=\"${orange}\">${no_suffix}</span>"
                    fi
                }
                update_audacious
            fi ;;
esac

exit
