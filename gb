#!/usr/bin/env bash

function get_datetime {  ## {{{
    case "$1" in
            ymdhms )   printf '%(%Y%m%d%H%M%S)T\n'            ;; ## PREVIOUSLY: printf '%s\n' "$(date +%Y%m%d%H%M%S)"
            ymd )      printf '%(%Y%m%d)T\n'                  ;; ## PREVIOUSLY: printf '%s\n' "$(date +%Y%m%d)"
            hms )      printf '%(%H%M%S)T\n'                  ;; ## PREVIOUSLY: printf '%s\n' "$(date +%H%M%S)"
            seconds )  printf '%(%s)T\n'                      ;; ## PREVIOUSLY: printf '%s\n' "$(date +%s)"
            weekday )  printf '%(%A)T\n'                      ;; ## PREVIOUSLY: printf '%s\n' "$(date +%A)"
            jymdhms )  printf '%s\n' "$(jdate +%Y%m%d%H%M%S)" ;;
            jymd )     printf '%s\n' "$(jdate +%Y%m%d)"       ;;
            jhms )     printf '%s\n' "$(jdate +%H%M%S)"       ;;
            jseconds ) printf '%s\n' "$(jdate +%s)"           ;;
            jweekday ) printf '%s\n' "$(jdate +%A)"           ;;
    esac
}
## }}}
function heading {  ## {{{
    source "$HOME"/scripts/gb-color

    echo -e "$(purple "$@")"  ## JUMP_2 can't use printf as it returns literal foo\nbar if 'foo\nbar' is passed to it
}
## }}}
function action_now {  ## {{{
    source "$HOME"/scripts/gb-color

    echo -e "$(green '→') $(grey "$@")"  ## JUMP_2 can't use printf as it returns literal foo\nbar if 'foo\nbar' is passed to it
}
## }}}
function accomplished {  ## {{{
    source "$HOME"/scripts/gb-color

    echo -e "$(green '✔') $(grey "$@")"  ## JUMP_2 can't use printf as it returns literal foo\nbar if 'foo\nbar' is passed to it
}
## }}}
function wrap_fzf_choice {  ## {{{
    source "$HOME"/scripts/gb-color

    printf '%s %s %s\n' "$(brown '--=[')" "$@" "$(brown ']=--')"
}
## }}}
function pipe_to_fzf {  ## {{{
    ## usage: this function expects 1 arg, for example:
    ##     item="$(pipe_to_fzf "${items[@]}")"

    local received
    readarray -t received <<< "$(printf '%s\n' "$@")"

    local fzf_choice="$(printf '%s\n' "${received[@]}" | fzf)"
    [ "$fzf_choice" ] && printf '%s\n' "$fzf_choice" || return 37
}
## }}}
function pipe_to_dmenu {  ## {{{
    ## usage: this function expects 3 args, for example:
    ##     item="$(pipe_to_dmenu "${items[@]}")" 'TITLE' ''
    ##     item="$(pipe_to_dmenu "${items[@]}")" ''      ''     ## <--,-- last arg can only be either 'red' or ''
    ##     item="$(pipe_to_dmenu "${items[@]}")" 'TITLE' 'red'  ## <--'
    ##     item="$(pipe_to_dmenu "${items[@]}")" ''      'red'

    local received
    readarray -t received <<< "$(printf '%s\n' "$@")"

    local last="${received[-1]}"
    if [ "$last" == 'red' ]; then
        local fg="${received[-1]}"
        local title="${received[-2]}"

        unset 'received[-2]'
        unset 'received[-1]'
    else
        local fg=''
        local title="${received[-1]}"

        unset 'received[-1]'
    fi

    [ "$fg" == 'red' ] && local dmenusb="$red_dark"

    local dmenu_choice="$(printf '%s\n' "${received[@]}" | dmenu -i -l "$dmenulines" -nb "$dmenunb" -nf "$dmenunf" -sb "$dmenusb" -sf "$dmenusf" -fn "$dmenufn" -p "$title")"
    [ "$dmenu_choice" ] && printf '%s\n' "$dmenu_choice" || return 37
}
## }}}
function pipe_to_rofi {  ## {{{
    ## usage: this function expects 3 args, for example:
    ##     item="$(pipe_to_rofi "${items[@]}")" 'TITLE' ''
    ##     item="$(pipe_to_rofi "${items[@]}")" ''      ''     ## <--,-- last arg can only be either 'red' or ''
    ##     item="$(pipe_to_rofi "${items[@]}")" 'TITLE' 'red'  ## <--'
    ##     item="$(pipe_to_rofi "${items[@]}")" ''      'red'

##################################################################
    local received
    readarray -t received <<< "$(printf '%s\n' "$@")"

    local last="${received[-1]}"
    if [ "$last" == 'red' ]; then
        local fg="${received[-1]}"
        local title="${received[-2]}"

        unset 'received[-2]'
        unset 'received[-1]'
    else
        local fg=''
        local title="${received[-1]}"

        unset 'received[-1]'
    fi
###############################################################

    [ ! "$fg" == 'red' ] && local theme="$HOME"/.config/rofi/onedark.rasi || local theme="$HOME"/.config/rofi/onedark-red.rasi

    local rofi_choice="$(printf '%s\n' "${received[@]}" | rofi -theme "$theme" -dmenu -i -p "$title")"
    [ "$rofi_choice" ] && printf '%s\n' "$rofi_choice" || return 37
}
## }}}
function lsblk_full {  ## {{{
    \lsblk -o NAME,LABEL,SIZE,UUID,FSTYPE,TYPE,MOUNTPOINT,OWNER,GROUP,MODE,MAJ:MIN,RM,RO
}
## }}}
function mounted_drives {  ## {{{
    if [ "$1" ]; then
        printf '%s\n' "$(df -hT)"
    else
        printf '%s\n' "$(df -T -x devtmpfs -x tmpfs -x usbfs -x loop)"  ## -x ARG instances help get rid of unnecessary drives
    fi
}
## }}}
function get_mountable_umountable {  ## {{{
    local m="$(\lsblk -nro NAME,LABEL,SIZE,UUID,FSTYPE,TYPE,MOUNTPOINT | \grep -iE 'part $|rom $')"
    local u="$(\lsblk -nro NAME,LABEL,SIZE,UUID,FSTYPE,TYPE,MOUNTPOINT | \grep -i '/tmp/')"
    [ "$m" ] && mountable="$m"
    [ "$u" ] && umountable="$u"
}
## }}}
function msgn {  ## {{{
    notify-send -u normal "$1" "$2" -i "$3" -t 10000
}
## }}}
function msgc {  ## {{{
    notify-send -u critical "$1" "$2" -i "$3"
}
## }}}
function copy_pacman_log {  ## {{{
    source "$HOME"/scripts/gb-color

    cp /var/log/pacman.log "$HOME"/linux/pacman.log
    msgn "<span color=\"${orange}\">/var/log/pacman.log</span> copied"
}
## }}}
function clear_playlist {  ## {{{
    audtool --playlist-clear
}
## }}}
function turn_off_shuffle {  ## {{{
    source "$HOME"/scripts/gb-audacious
    [ "$shuffle_status" == 'on'  ] && audtool --playlist-shuffle-toggle
}
## }}}
function turn_on_shuffle {  ## {{{
    source "$HOME"/scripts/gb-audacious
    [ "$shuffle_status" == 'off' ] && audtool --playlist-shuffle-toggle
}
## }}}
function play_shutdown_track {  ## {{{
    source "$HOME"/scripts/gb-audio
    pacmd play-file "$HOME"/linux/sounds/shutdown.ogg "$def_sink_index"
}
## }}}
function day_hour_min_sec {  ## {{{
    local seconds="${1%.*}"  ## remove decimal in case arg is a float
    local sec="$(printf  "%02d" "$(( "$seconds" % 60 ))")"
    local min="$(printf  "%02d" "$(( "$seconds" / 60 % 60 ))")"
    local hour="$(printf "%02d" "$(( "$seconds" / 3600 % 24 ))")"
    local day="$(printf  "%02d" "$(( "$seconds" / 3600 / 24 ))")"
    [ "$day" -eq 0 ] && printf '%s\n' "${hour}:${min}:${sec}" || printf '%s\n' "${day}:${hour}:${min}:${sec}"
}
## }}}
function clear_clipboard {  ## {{{
    greenclip clear
    msgn 'cleared' '' "$HOME"/linux/themes/greenclip.png
}
## }}}
function random_wallpaper {  ## {{{
    local current_wallpaper_file=/tmp/current_wallpaper
    ## same wallpaper for both screens
    local rand_wall="$(shuf -n 1 < <(find "$HOME"/wallpapers -mindepth 1 -maxdepth 1 -type f -iname '*.jpg'))"  ## JUMP_1
    printf '%s\n' "${rand_wall##*/}" > "$current_wallpaper_file"
    feh --bg-scale "$rand_wall"
}
## }}}
function copy_random_wallpaper_for_startup {  ## {{{
    source "$HOME"/scripts/gb-color

    local rand_wall="$(shuf -n 1 < <(find "$HOME"/wallpapers -mindepth 1 -maxdepth 1 -type f -iname '*.jpg'))"  ## JUMP_1
    sudo cp "$rand_wall" /usr/share/wallpapers/startup_background.jpg
    msgn "<span color=\"${orange}\">${rand_wall##*/}</span> copied"
}
## }}}
function set_widget {  ## {{{
    ## only the awesome-widgets use this function but it'd better be here (rather than the script itself)
    ## because sometimes it's needed by 0-test
    local widget="$1"
    local attr="$2"
    local value="$3"
    awesome-client "${widget}.${attr} = '${value}'"
}  ## NOTE do NOT change quotes
## }}}
function get_input {  ## {{{
    source "$HOME"/scripts/gb-color

    unset input
    while [ ! "$input" ]; do
        read -p "$(olive "$@") " input
        printf '\33[A'
    done
    printf '\n'
}
## }}}
function get_single_input {  ## {{{
    source "$HOME"/scripts/gb-color

    unset single_input
    while [ ! "$single_input" ]; do read -p "$(olive "$@") " -n 1 single_input; printf '\33[A'; done && printf '\n\n'
}
## }}}
function line {  ## {{{
    source "$HOME"/scripts/gb-color

    grey "$(printf "%$(tput cols)s\n" | sed "s/ /▬/g")"
}
## }}}

 # function find_duplicate_images {  ## {{{
 #     source "$HOME"/scripts/gb-color

 #     [ ! "$1" ] && red 'arg needed' && exit
 #     dest_dir="$1"
 #     [ ! -d "$dest_dir" ] && {
 #         red 'no such dir' && exit
 #     }

 #     SECONDS=0

 #     readarray -t pics <<< "$(find "$dest_dir" -mindepth 1 -maxdepth 1 -type f -iname '*.jpg' | sort)"
 #     dups=''

 #     for ((i=0; i<"${#pics[@]}"; i++)); {
 #         p1="${pics[$i]}"

 #         ## start comparing only if p1 is not already in dups
 #         if_p1_in_dups="$(printf '%s\n' "$dups" | \grep "$p1")"  ## I quoted $p1 and didn't check if it still works
 #         if [ ! "$if_p1_in_dups" ]; then
 #             printf '%s\n' "$p1"
 #             for p2 in "${pics[@]:$i}"; {
 #                 ## prevent comparing with itself
 #                 if [ ! "$p1" == "$p2" ]; then
 #                     difference="$(diff "$p1" "$p2")"
 #                     [ ! "$(printf '%s\n' "$difference" | \grep 'differ$')" ] && dups+="${p1} = ${p2}, "
 #                 fi
 #             }

 #             ## write dups already found if any
 #             [ "$dups" ] && green "dups: $dups"

 #             grey '-------------------------'

 #         fi
 #     }

 #     green "dups: $dups"
 #     printf '\n'

 #     dur="$(day_hour_min_sec "$SECONDS")"
 #     printf 'Total duration: %s\n' "$dur"
 # }
## }}}
# function convert_Fun_to_lower_size {  ## {{{
#     old_fun="$HOME"/website/Files/Fun
#     new_fun="$HOME"/downloads/New_Fun
#     if [ -d "$new_fun" ]; then
#         rm "$new_fun"/*
#     else
#         mkdir "$new_fun"
#     fi

#     readarray -t pics <<< "$(find "$old_fun" -mindepth 1 -maxdepth 1 -type f -iname '*jpg' | sort)"

#     for p in "${pics[@]##*/}"; {
#         printf '%s\n' "$p"
#         orig_p="$old_fun"/"$p"
#         new_p="$new_fun"/"$p"
#         ffmpeg -i "$orig_p" -q:a 1 -y "$new_p" 2>/dev/null
#     }
# }
# timer and record_* {{{
# function timer {  ## {{{
#     source "$HOME"/scripts/gb-color
#     source "$HOME"/scripts/gb-screen
#     source "$HOME"/scripts/gb-audio
#     start="$(get_datetime 'jhms')"
#     for ((i=1; i<="$1"; i++)); {
#         current="$(get_datetime 'jhms')"
#         let seconds="$current - $start"
#         echo -en '\r  \r'
#         let h="$seconds / 3600 % 24"
#         let m="$seconds / 60 % 60"
#         let s="$seconds % 60"
#         w="$(printf "$2 %02d:%02d:%02d" "$h" "$m" "$s"  ## NOTE no \n ??
#         set_widget 'record' 'markup' "<span color=\"${red}\">${record_icon} <b>${w}</b></span>"
#         sleep 1
#     }
# }
## }}}
# function record_audio {  ## {{{
#     source "$HOME"/scripts/gb-screen
#     source "$HOME"/scripts/gb-audio
#     timer "$3" "$4" &
#     ffmpeg -f pulse -i "$def_source_mon_index" \
#            -f pulse -i default                \
#            -filter_complex amix=inputs=2      \
#            -t "$1" "$2" 2>/dev/null
# }
## }}}
# function record_audio_ul {  ## {{{
#     source "$HOME"/scripts/gb-screen
#     source "$HOME"/scripts/gb-audio
#     ffmpeg -f pulse -i "$def_source_mon_index" \
#            -f pulse -i default \
#            -filter_complex amix=inputs=2 \
#            "$1" 2>/dev/null
# }
## }}}
# function record_screen {  ## {{{
#     source "$HOME"/scripts/gb-screen
#     timer "$3" "$6" &
#     ffmpeg -f pulse -i "$def_source_mon_index" \
#            -f pulse -i default \
#            -filter_complex amix=inputs=2 \
#            -f x11grab -r 30 -s "$4" -i :0.0+"$5",0 \
#            -vcodec libx264 -preset veryfast -crf 18 -acodec libmp3lame -q:a 1 -pix_fmt yuv420p \
#            -t "$1" "$2" 2>/dev/null
# }
## }}}
# function record_screen_ul {  ## {{{
#     source "$HOME"/scripts/gb-screen
#     source "$HOME"/scripts/gb-audio
#     ffmpeg -f pulse -i "$def_source_mon_index" \
#            -f pulse -i default \
#            -filter_complex amix=inputs=2 \
#            -f x11grab -r 30 -s "$2" -i :0.0+"$3",0 \
#            -vcodec libx264 -preset veryfast -crf 18 -acodec libmp3lame -q:a 1 -pix_fmt yuv420p \
#            "$1" 2>/dev/null
# }
## }}}
# function record_video {  ## {{{
#     source "$HOME"/scripts/gb-screen
#     source "$HOME"/scripts/gb-audio
#     timer "$3" "$4" &
#     ffmpeg -f v4l2 -framerate 25 -video_size 1366x768 -i "$def_video_dev" \
#            -f pulse -i "$def_source_mon_index" \
#            -f pulse -i default \
#            -filter_complex amix=inputs=2 \
#            -t "$1" "$2" 2>/dev/null
# }
## }}}
# function record_video_ul {  ## {{{
#     source "$HOME"/scripts/gb-screen
#     source "$HOME"/scripts/gb-audio
#     ffmpeg -f v4l2 -framerate 25 -video_size 1366x768 -i "$def_video_dev" \
#            -f pulse -i "$def_source_mon_index" \
#            -f pulse -i default \
#            -filter_complex amix=inputs=2 \
#            "$1" 2>/dev/null
# }
## }}}
# function record_mic_mon_on {  ## {{{
#     source "$HOME"/scripts/gb-audio
#     unmute_mic
#     mic_25
#     unmute_mon
#     mon_100
# }
## }}}
# function record_mon_on {  ## {{{
#     source "$HOME"/scripts/gb-audio
#     unmute_mon
#     mon_100
# }
## }}}
# function record_mic_mon_off {  ## {{{
#     source "$HOME"/scripts/gb-audio
#     mute_mic
#     mic_0
#     mute_mon
#     mon_0
# }
## }}}
## }}}
