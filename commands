#!/usr/bin/env bash
source $HOME/scripts/gb

function ctc_msg(){
    local trimmed="$(echo "$@" | tr -d \<,\&)"
    msgn "copied to clipboard" "<span color=\"$orange\">$trimmed</span>" ;}

IFS=$'\n'

title="${0##*/}"
heading "$title"

main_items=( $(cat "$0" | sed '1,23d') )
main_item="$(pipe_to_fzf "${main_items[@]}")" && wrap_fzf_choice "$main_item" || exit 37

main_item="${main_item##*---> }"

echo "$main_item" | tr -d '\n' | xclip -selection clipboard
ctc_msg "$main_item" && accomplished
exit

############################################

print line 5 [i]  ---> sed '21q;d'
print line 5 [ii] ---> awk NR==21
print last line ---> sed -e '$!d'
remove first line ---> sed '1d'
remove last line ---> sed '$d'
remove lines 1 to 3 ---> sed '1,3d'
print columns 4 and 5 ---> awk '{ print $4 " " $5 }'
remove columns 1 and 2 ---> awk '{ $1=$2=""; print $0 }'
print last column ---> awk '{ print $NF }'
remove last column ---> sed -r 's/\s+\S+$//'
print first n characters (X is your number) ---> cut -c 1-X
print last n characters (X is your number) ---> ${<variable>:(-X)}
remove first 6 letters of each line ---> cut -c 6-
remove last 6 letters of each line ---> sed 's/.\{6\}$//'
remove empty lines [i]  ---> sed '/^$/d'
remove empty lines [ii] ---> awk NF
remove one line before a string ---> sed -ni '/<string>/{x;d;};1h;1!{x;p;};${x;p;}'
remove one line after  a string ---> sed -i '/<string>/{N;s/\n.*//;}'

remove suffix ---> "${<variable>%<suffix>}"
remove prefix ---> "${<variable>#<prefix>}"
remove long suffix  ---> "${<variable>%%<suffix>}"
remove long prefix  ---> "${<variable>##<prefix>}"
replace first match ---> "${<variable>/<first-match>/<substitute>}"
replace all ---> "${<variable>//<first-match>/<substitute>}"
replace suffix ---> "${<variable>/%<suffix>/<substitute>}"
replace prefix ---> "${<variable>/#<prefix>/<substitute>}"
replace all the initial occurences of a string [i]  --> sed 's/^<string>*/<substitute>/'
replace all the initial occurences of a string [ii] --> sed 's/^\(<string>\)*/<substitute>/'
reverse-case first character ---> "${<variable>~}"
reverse-case all characters ---> "${<variable>~~}"
print extension ---> "${<variable>##*.}"
remove extension ---> "${<variable>%.*}"

remove after the last occurrence of a character [i]   ---> sed 's/\(.*\)<character>.*/\1/'
remove after the last occurrence of a character [ii]  ---> sed 's/<character>[^<character>]*$//'
remove after the last occurrence of a character [iii] ---> "${<variable>%<character>*}"
add string to the end of the line ---> sed 's/$/<string>/'
add word to the nth column in every line ---> awk '$1=$1"-word"'
replace lowercase with uppercase ---> sed 's/[a-z]/\U&/g'
replace uppercase with lowercase ---> sed 's/[A-Z]/\L&/g'
print number of lines ---> sed -n '$='
set delimiter X and print column 2 [i]  ---> cut -d "<delimiter>" -f 2
set delimiter X and print column 2 [ii] ---> awk -F[<delimiter>] '{ print $2 }'
make first letter capital ---> sed 's/.*/\u&/'
sort alphabetically ---> sort
replace the first occurrence ---> sed -e '0,/<string>/ s/<string>/<substitute>/'
show the line that starts with a string (it is case-sensitive) ---> awk '/^<string>/'
print before a string ---> ??
only print numbers (each in a separate line) [i]  ---> grep -io '[0-9]*'
only print numbers (each in a separate line) [ii] ---> grep -io -P '\d*'
print string between Y and Z [i]  ---> grep -ioP '(?<=Y).*?(?=Z)'
print string between Y and Z [ii] ---> grep -ioP 'Y\K.*?(?=Z)'
print extension ---> "${<variable>##*.}"
remove extension ---> "${<variable>%.*}"
print next word after a string [i]  ---> awk '{for(i=1;i<=NF;i++) if ($i=="<string>") print $(i+1)}'
print next word after a string [ii] ---> grep -oP "(?<=<string> )[^ ]+"
grep and awk (awk is case-sensitive) ---> grep -i <string> = awk '/<string>/'
make awk case-insensitive [i]  ---> awk '{IGNORECASE=1} <command> ;'
make awk case-insensitive [ii] ---> awk 'tolower($0) ~ <command>'
add string to the second line ---> awk 'NR==1{print; print "<string>"} NR!=1'
print after the last / ---> "${x##*/}" = basename "$x"
remove/replace n characters before a string ---> sed -e 's/.\{<number>\}<string>/<substitute>/'
keep from nth character until nth character (and repeat) ---> ${<var>:0:9}${<var>:13:8}
uppercase variable's first letter ---> echo ${<var>^}
uppercase variable's all letters  ---> echo ${<var>^^}
lowercase variable's first letter ---> echo ${<var>,}
lowercase variable's all letters  ---> echo ${<var>,,}
print 1-2-3-4-5-6-7-8-9-10 ---> seq -s - 10
add column from another file ---> paste -d' ' <file1> <file2>
clears the line ---> printf "\33[A"
fading line  ---> for i in {17..20} {19..17} ; do echo -ne "\e[38;5;${i}m-\e[0m" ; done ; echo
to not show errors ---> <command> 2>/dev/null
check if root ---> if [ "$EUID" -ne "0" ]; then echo "You are not root"; fi
: (called null command) [i]   ---> The : command (which equals the command true) means do nothing, and its exit status (i.e. $?) is true (i.e. 0)
: (called null command) [ii]  ---> Example 1: while : equals while true
: (called null command) [iii] ---> Example 2: if [ <condition> ]; then : ; else <command> ; fi
print "These" "words" "are" "quoted" ---> echo \"{These,words,are,quoted}\"
print function name ---> myfunction(){ echo "This function is $FUNCNAME" ;} ; myfunction
print lines with whose length are between 10 to 20 ---> grep -x '.\{10,20\}'
generate random number [i]  ---> echo $((1 + RANDOM % 1000))
generate random number [ii] ---> echo $((1 + RANDOM%=1000))
sequence [i]   ---> for i in `seq 1 10` ; do <command> ; done
sequence [ii]  ---> for i in {1..10} ; do <command> ; done
sequence [iii] ---> for i in $(seq 10) ; do <command> ; done
mutt pattern ---> echo "<message body>" | mutt -s "<subject>" <recepient-email> -a <file-to-attach>
type unicode characters ---> crl + shift + u + <hexadecimal digits>
close terminal without terminating tasks ---> disown -a && exit
system clock ---> timedatectl status
print variable length [i]  ---> echo ${#<variable>}
print variable length [ii] ---> echo -n "$<variable>" | wc -c
arrays ---> Syntax         Result
arrays ---> arr=()         Create an empty array
arrays ---> arr=(1 2 3)    Initialize array
arrays ---> ${arr[2]}      Retrieve third element
arrays ---> ${arr[@]}      Retrieve all elements
arrays ---> ${!arr[@]}     Retrieve array indices
arrays ---> ${#arr[@]}     Calculate array size
arrays ---> arr[0]=3       Overwrite 1st element
arrays ---> arr+=(4)       Append value(s)
arrays ---> str=$(ls)      Save ls output as a string
arrays ---> arr=( $(ls) )  Save ls output as an array of files
arrays ---> ${arr[@]:s:n}  Retrieve n elements starting at index s
setaf syntax (https://linux.101hacks.com/ps1-examples/prompt-color-using-tput/) ---> echo (tput setaf 0) <text> (tput sgr0)
diff the output of two commands ---> diff <(<command1>) <(<command2>)
print sth on the right in bash (align right) ---> printf "%*s\n" $COLUMNS "<string>"
make read input invisible when entering ---> -s
make read input 1 character long ---> -n 1
make sure read input is a number ---> while [ ! "$number" =~ ^[0-9]+$ ]; do read -p "> Numbers only. Try again: " number ; printf "\33[A" ; done ; echo
make sure read input is a letter ---> while [ ! "$letter" =~ ^[a-Z]+$ ]; do read -p "> Letters only. Try again: " letter ; printf "\33[A" ; done ; echo
erase everything on the line, regardless of cursor position ---> printf "\33[A" OR echo -en "\033[1K\r" OR echo -en "\033[2K"
print emoji ---> echo -e '\u'<code>
clear ---> printf \\e[2J\\e[H\\e[m # = clear
ignore terminal interrupt (CTRL+C, SIGINT) ---> trap '' INT
call a function or do a command on window resize ---> trap '<COMMAND or FUNCTION>' SIGWINCH
do something before every command ---> trap '<COMMAND>' DEBUG
do something when a shell function or a sourced file finishes executing ---> trap '<COMMAND>' RETURN
get terminal columns [i]  ---> echo $(tput cols)
get terminal columns [ii] ---> echo $COLUMNS
convert ---> convert <SOURCE_IMAGE> -verbose -resize <WIDTH(xHEIGHT)>\> <DEST_PATH>
in terminal [i]   ---> !<command>       runs the commands as it was last run (with all the flags, etc)
in terminal [ii]  ---> Ctl + u          cut to the beginning
in terminal [iii] ---> Ctl + k          cut to the end
in terminal [iv]  ---> Ctl + y          paste
in terminal [v]   ---> Ctl + x + e      open command temporarily in text editor
in terminal [vi]  ---> Alt + .          paste arguments of previous command
in terminal [vii] ---> Alt + Shift + 3  comment the command and run it
http torsocks ---> http_proxy=socks5://127.0.0.1:9050 torsocks
toggle keyboard layout ---> setxkbmap -layout us,ir -option grp:caps_toggle
show swap files ---> swapon --show
delete duplicate, nonconsecutive and nonempty lines from a file ---> vim -esu NONE '+g/\v^(.+)$\_.{-}^\1$/d' +wq <FILE>
ddpattern ---> sudo dd if=****.iso of=/dev/sd* status=progress bs=4M && sync
turn off screensaver ---> xset s 0 0 && xset -dpms
expand alias in script: ---> shopt -s expand_aliases (put it at the top of script)
stop pop sound ---> add 'options snd-hda-intel power_save=0 power_save_controller=N' to the end of /etc/modprobe.d/alsa-base.conf
repeated character (https://www.unix.com/shell-programming-and-scripting/235829-how-print-particular-character-n-number-times-line.html) ---> dashed="$(awk -v i=30 'BEGIN {OFS="-"; $i="-"; print}')"
chack if variable is a number [i]  ---> re="^[0-9]+$"; [[ $variable =~ $re ]] && echo "number" || echo "no number"  ## do not replace [[ with [, and do NOT quote $re
chack if variable is a number [ii] ---> [ $variable -eq $variable ] 2>/dev/null && echo "number" || echo "no number"
chack if variable matches pattern ---> re="*abc*"; [[ "$variable" == $re ]] && echo "match"  ## do not replace [[ with [, and do NOT quote $re
newest item in clipboard ---> xclip -o
join many mp3 files (NOT tested) ---> ffmpeg -f concat -safe 0 -i <(for f in ./*.mp3; do echo "file '$PWD/$f'"; done) -c copy ./output.mp3
colors with span ---> <span background=\"#f3f300\"><span color=\"#000000\"></span></span>
