#!/usr/bin/env bash
source $HOME/scripts/gb

function help(){ source $HOME/scripts/.help; summary_help ;}

function prompt(){
    for args in "$@"; do
        case "$1" in
            -n ) [ ! "$name" ] && get_input "Dir/file name" && name="$input" ;;
        esac
        shift
    done ;}

while getopts 'hn:' flag; do
    case "$flag" in
        h ) help           ;;
        n ) name="$OPTARG" ;;
    esac
done

title="${0##*/}"
heading "$title"

main_items=( "statistics" "with directories" "with directories + files" "with subdirectories" "with subdirectories (largest first)" "stat file" "stat file system" "help" )
main_item="$(pipe_to_fzf "${main_items[@]}")" && wrap_fzf_choice "$main_item" || exit 37

case "$main_item" in
    statistics ) prompt -n
                 if [ -d "$name" ]; then
                     du -sh "$name"

                     directories="$(find "$name" -mindepth 1 -maxdepth 1 -type d)"
                     ## $(wc -l <<< $(echo "$directories"))) returns 1 even if there are no directories
                     ## so, we have to do this:
                     [ "$directories" ] && directories_count=$(wc -l <<< $(echo "$directories")) || directories_count=0

                     files="$(find "$name" -mindepth 1 -maxdepth 1 -type f)"
                     ## $(wc -l <<< $(echo "$files"))) returns 1 even if there are no files
                     ## so, we have to do this:
                     [ "$files" ] && files_count=$(wc -l <<< $(echo "$files")) || files_count=0

                     deep_directories="$(find "$name" -mindepth 1 -type d)"  ## -maxdepth 1 is not needed here
                     ## $(wc -l <<< $(echo "$deep_directories"))) returns 1 even if there are no deep_directories
                     ## so, we have to do this:
                     [ "$deep_directories" ] && deep_directories_count=$(wc -l <<< $(echo "$deep_directories")) || deep_directories_count=0

                     deep_files="$(find "$name" -mindepth 1 -type f)"  ## -maxdepth 1 is not needed here
                     ## $(wc -l <<< $(echo "$deep_files"))) returns 1 even if there are no deep_files
                     ## so, we have to do this:
                     [ "$deep_files" ] && deep_files_count=$(wc -l <<< $(echo "$deep_files")) || deep_files_count=0

                     echo -e "ls:\t$directories_count directories / $files_count files"
                     echo -e "rcrsv:\t$deep_directories_count directories / $deep_files_count files" && accomplished
                 else
                     du -sh "$name"
                     info="$(file -b "$name" | cut -d "," -f 1)"
                     echo -e "Type:\t$info" && accomplished
                 fi ;;
    "with directories" ) prompt -n
                         if [ -d "$name" ]; then
                             cd "$name"
                             du --max-depth=1 -h --apparent-size | sort -rh && accomplished
                         else
                             red "No such directory" && exit
                         fi ;;
    "with directories + files" ) prompt -n
                                 if [ -d "$name" ]; then
                                     cd "$name"
                                     du -cksh --apparent-size * | sort -rh && accomplished
                                     # du -cksh * && accomplished
                                 else
                                     red "No such directory" && exit
                                 fi ;;
    "with subdirectories" ) prompt -n
                            if [ -d "$name" ]; then
                                du -h "$name" && accomplished
                            else
                                red "No such directory" && exit
                            fi ;;
    "with subdirectories (largest first)" ) prompt -n
                                            if [ -d "$name" ]; then
                                                du -Sh "$name" | sort -n -r && accomplished
                                            else
                                                red "No such directory"
                                            fi ;;
    "stat file" ) prompt -n
                  [ ! -f "$name" ] && red "No such file" && exit
                  x="0"
                  index=( '%a' '%A' '%b' '%B' '%C' '%d' '%D' '%f' '%F' '%g' '%G' '%h' '%i' '%m' '%n' '%N' '%o' '%s' '%t' '%T' '%u' '%U' '%w' '%W' '%x' '%X' '%y' '%Y' '%z' '%Z' )
                  messages=( "access rights in octal (note '#' and '0' printf flags)" "access rights in human readable form" "number of blocks allocated (see %B)" "the size in bytes of each block reported by %b" "SELinux security context string" "device number in decimal" "device number in hex" "raw mode in hex" "file type" "group ID of owner" "group name of owner" "number of hard links" "inode number" "mount point" "file name" "quoted file name with dereference if symbolic link" "optimal I/O transfer size hint" "total size, in bytes" "major device type in hex, for character/block device special files" "minor device type in hex, for character/block device special files" "user ID of owner" "user name of owner" "time of file birth, human-readable; - if unknown" "time of file birth, seconds since Epoch; 0 if unknown" "time of last access, human-readable" "time of last access, seconds since Epoch" "time of last data modification, human-readable" "time of last data modification, seconds since Epoch" "time of last status change, human-readable" "time of last status change, seconds since Epoch" )
                  echo -e "File: $name\n"
                  for i in "${index[@]}"; do
                      echo -ne "$(stat -c $i $name) $(green  ) "; echo "${messages[$x]}"
                      ((x++))
                      sleep 0.1
                  done ;;
    "stat file system" ) prompt -n
                         [ ! -f "$name" ] && red "No such file" && exit
                         x="0"
                         index=( '%a' '%b' '%c' '%d' '%f' '%i' '%l' '%n' '%s' '%S' '%t' '%T' )
                         messages=( "free blocks available to non-superuser" "total data blocks in file system" "total file nodes in file system" "free file nodes in file system" "free blocks in file system" "file system ID in hex" "maximum length of filenames" "file name" "block size (for faster transfers)" "fundamental block size (for block counts)" "file system type in hex" "file system type in human readable form" )
                         echo -e "File system: $name\n"
                         for i in "${index[@]}"; do
                             echo -ne "$(stat -c $i $name) $(green  ) "; echo "${messages[$x]}"
                             ((x++))
                             sleep 0.1
                         done ;;
    help ) help ;;
esac

exit
